Q1.
Write a code in java, to check if two binary trees are the same or not. Given the roots of two binary trees p and q.
Answer:
import java.util.*;
class Node {
    int data;
    Node left, right;
    
    public Node(int data) {
        this.data = data;
        left = right = null;
    }
}

public class Tree {

    public static boolean isTree(Node p, Node q) {
        if (p == null && q == null) {
            return true;
        }
        
        if (p == null || q == null) {
            return false;
        }
        
        if (p.data != q.data) {
            return false;
        }
        
        return isTree(p.left, q.left) && isTree(p.right, q.right);
    }

    public static void main(String[] args) {
        Node p = new Node(1);
        p.left = new Node(2);
        p.right = new Node(3);

        Node q = new Node(1);
        q.left = new Node(2);
        q.right = new Node(3);

        boolean result = isTree(p, q);
        System.out.println(result); 
    }
}

Output:
true
---------------------------------------------------------------------------------------------------------------
Q2.
Write a code in java, to invert the tree and return root. Given root of a binary tree.
Answer:
import java.util.*;

class Node {
    int data;
    Node left, right;

    public Node(int data) {
        this.data = data;
        left = right = null;
    }
}

public class Tree {

    public static Node invertTree(Node root) {
        if (root == null) {
            return null;
        }

        Node temp = root.left;
        root.left = root.right;
        root.right = temp;

        invertTree(root.left);
        invertTree(root.right);

        return root;
    }

    public static void printOrder(Node root) {
        if (root == null) {
            return;
        }

        Queue<Node> queue = new LinkedList<>();
        queue.add(root);

        while (!queue.isEmpty()) {
            Node c = queue.poll();
            System.out.print(c.data + " ");

            if (c.left != null) {
                queue.add(c.left);
            }

            if (c.right != null) {
                queue.add(c.right);
            }
        }
    }

    public static void main(String[] args) {
        Node root = new Node(4);
        root.left = new Node(2);
        root.right = new Node(7);
        root.left.left = new Node(1);
        root.left.right = new Node(3);
        root.right.left = new Node(6);
        root.right.right = new Node(9);

       
        printLevelOrder(root);
        Node invertedRoot = invertTree(root);
        
        printLevelOrder(invertedRoot);
    }
}

Output:
4 2 7 1 3 6 9 
4 7 2 9 6 3 1 
-------------------------------------------------------------------------------------------------------------
Q3.
Write a code in java, print the sum of all left leaves.
Answer:
class Node {
    int data;
    Node left, right;

    public Node(int data) {
        this.data = data;
        left = right = null;
    }
}public class LeftLeaves {

    public static int leftLeaves(Node root) {
        if (root == null) {
            return 0;
        }
        int sum = 0;
        if (root.left != null && root.left.left == null && root.left.right == null) {
            sum += root.left.data;
        }

        sum += leftLeaves(root.left);
        sum += leftLeaves(root.right);

        return sum;
    }

    public static void main(String[] args) {
        Node root = new Node(3);
        root.left = new Node(9);
        root.right = new Node(20);
        root.right.left = new Node(15);
        root.right.right = new Node(7);

        int result = leftLeaves(root);
        System.out.println(result);
    }
}
Output:
24
------------------------------------------------------------------------------------------------------------------------------
Q4.
Write a code in java to convert sorted array to the binary search tree.
Answer:
class Node {
    int data;
    Node left, right;

    public Node(int data) {
        this.data = data;
        left = right = null;
    }
}

public class BST {

    public static Node bST(int[] n) {
        if (n == null || n.length == 0) {
            return null;
        }

        return bST(n, 0, n.length - 1);
    }

    private static Node bST(int[] n, int start, int end) {
        if (start > end) {
            return null;
        }

        int mid = start + (end - start) / 2;
        Node root = new Node(n[mid]);

        root.left = bST(n, start, mid - 1);
        root.right = bST(n, mid + 1, end);

        return root;
    }

    public static void inOrderTraversal(Node root) {
        if (root != null) {
            inOrderTraversal(root.left);
            System.out.print(root.data + " ");
            inOrderTraversal(root.right);
        }
    }

    public static void main(String[] args) {
        int[] n = {-10, -3, 0, 5, 9};
        Node result = bST(n);
        inOrderTraversal(result);
    }
}

Output:
-10 -3 0 5 9 
----------------------------------------------------------------------------------------------------------------------------
Q5.
Write a code in java, Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the range [low, high].
Answer:
class Node {
    int data;
    Node left, right;

    public Node(int data) {
        this.data = data;
        left = right = null;
    }
}

public class SumBST {

    public static int sumBst(Node root, int low, int high) {
        if (root == null) {
            return 0;
        }

        int sum = 0;

        if (root.data >= low && root.data <= high) {
            sum += root.data;
        }

        if (root.data > low) {
            sum += sumBst(root.left, low, high);
        }

        if (root.data < high) {
            sum += sumBst(root.right, low, high);
        }

        return sum;
    }

    public static void main(String[] args) {
        Node root = new Node(10);
        root.left = new Node(5);
        root.right = new Node(15);
        root.left.left = new Node(3);
        root.left.right = new Node(7);
        root.right.right = new Node(18);

        int low = 7;
        int high = 15;

        int result = sumBst(root, low, high);
        System.out.println(result); 
    }
}
Output:
32




