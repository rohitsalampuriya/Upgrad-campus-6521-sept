Abstraction:

Q.1
An abstract class can have constructors and static methods?
Options:
A. TRUE
B. FALSE
C. Abstract class can have constructors but can not have static methods.
D. Abstract class can not have constructors but can have static methods.Answer:

Answer:
A
Explanation: It can have constructors and static methods also.

-------------------------------------------------------------------------------------------------
Q.2
What is the syntax of abstract class in java?
Options:
A. abstract A{}
B. abstract class A
C. abstract class A{}
D. abstract class A[]

Answer:
C
Explanation: The syntax of abstract class in java is abstract class A{}.

-------------------------------------------------------------------------------------------------
Q.3
 A method which is declared as abstract and does not have implementation is known as an _____________?
Options:
A. Abstract Interface
B. Abstract Thread
C. Abstract List
D. abstract Method
Answer:
 D
Explanation: A method which is declared as abstract and does not have implementation is known as an abstract method.

-------------------------------------------------------------------------------------------------
Q.4
Which of these packages contains abstract keyword?
Options:
A. java.lang
B. java.util
C. java.io
D. java.system

Answer:
A
Explanation: java.lang packages contains abstract keyword.

-------------------------------------------------------------------------------------------------
Q.5
An abstract class can have a data member, abstract method, method body (non-abstract method), constructor, and even main() method.
Options:
A. TRUE
B. FALSE
C. Can be true or false
D. can not say

Answer:
A
Explanation: Yes, An abstract class can have a data member, abstract method, method body (non-abstract method), constructor, and even main() method.

-------------------------------------------------------------------------------------------------
Encapsulation:

Q.1
Write a Java program to create a class called Person with private instance variables name, age. and country. Provide public getter and setter methods to access and modify these variables.
Answer:

public class Main {
  public static void main(String[] args) {
    // Create an instance of Person
    Person person = new Person();

    // Set values using setter methods
    person.setName("Arthfael Viktorija");
    person.setAge(25);
    person.setCountry("USA");

    // Get values using getter methods
    // Print the values
    System.out.println("Name: " + person.getName());
    System.out.println("Age: " + person.getAge());
    System.out.println("Country: " + person.getCountry());
  }
}
class Person {
  private String name;
  private int age;
  private String country;

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public int getAge() {
    return age;
  }

  public void setAge(int age) {
    this.age = age;
  }

  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }
}
Output:
Name: Arthfael Viktorija
Age: 25
Country: USA
---------------------------------------------------------------------------------------------------------------
Q.2
Write a Java program to create a class called BankAccount with private instance variables accountNumber and balance. Provide public getter and setter methods to access and modify these variables.
Answer:

public class Main {
  public static void main(String[] args) {
    // Create an instance of BankAccount
    BankAccount account = new BankAccount();

    // Set values using setter methods
    account.setAccountNumber("SB-09876");
    account.setBalance(2000.0);

    // Get values using getter methods
    // Print the values
    System.out.println("Account Number: " + account.getAccountNumber());
    System.out.println("Balance: " + account.getBalance());
  }
}

class BankAccount {
  private String accountNumber;
  private double balance;

  public String getAccountNumber() {
    return accountNumber;
  }
  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }
  public double getBalance() {
    return balance;
  }
  public void setBalance(double balance) {
    this.balance = balance;
  }
}

Output:
Account Number: SB-09876
Balance: 2000.0
---------------------------------------------------------------------------------------------------------------
Q.3
Write a Java program to create a class called Rectangle with private instance variables length and width. Provide public getter and setter methods to access and modify these variables.
Answer:
public class Main
{
	public static void main(String[] args) {
		Rectangle r = new Rectangle();
		r.setLength(2);
		r.setWidth(3);
		System.out.println(r.getLength());
		System.out.println(r.getWidth());
    System.out.println(r.rectangle());
	}
}
class Rectangle{
    private double length;
    private double width;
    public double getLength(){
        return length;
    }
    public void setLength(double length){
        this.length = length;
    }
     public double getWidth(){
        return width;
    }
    public void setWidth(double width){
        this.width = width;
    }
    public double rectangle(){
        return length * width;
    }
}
Output:
2.0
3.0
6.0
---------------------------------------------------------------------------------------------------------------
Q.4
Write a Java program to create a class called Employee with private instance variables employee_id, employee_name, and employee_salary. Provide public getter and setter methods to access and modify the id and name variables, but provide a getter method for the salary variable that returns a formatted string.
Answer:

public class Main {
  public static void main(String[] args) {
    // Create an instance of Employee
    Employee employee = new Employee();

    // Set values using setter methods
    employee.setEmployeeId(15);
    employee.setEmployeeName("Caelius Dathan");
    employee.setEmployeeSalary(4900.0);

    // Get values using getter methods
    // Print the values
    System.out.println("Employee Details:");
    System.out.println("ID: " + employee.getEmployeeId());
    System.out.println("Name: " + employee.getEmployeeName());
    System.out.println("Salary: " + employee.getFormattedSalary());
  }
}

class Employee {
  private int employee_id;
  private String employee_name;
  private double employee_salary;

  public int getEmployeeId() {
    return employee_id;
  }

  public void setEmployeeId(int employeeId) {
    this.employee_id = employeeId;
  }

  public String getEmployeeName() {
    return employee_name;
  }

  public void setEmployeeName(String employeeName) {
    this.employee_name = employeeName;
  }

  public double getEmployeeSalary() {
    return employee_salary;
  }

  public void setEmployeeSalary(double employeeSalary) {
    this.employee_salary = employeeSalary;
  }

  public String getFormattedSalary() {
    return String.format("$%.2f", employee_salary);
  }
}

Output:
Employee Details:
ID: 15
Name: Caelius Dathan
Salary: $4900.00
---------------------------------------------------------------------------------------------------------------
Q.5
Write a Java program to create a class called Circle with a private instance variable radius. Provide public getter and setter methods to access and modify the radius variable. However, provide two methods called calculateArea() and calculatePerimeter() that return the calculated area and perimeter based on the current radius value.
Answer:

public class Main {
  public static void main(String[] args) {
    // Create an instance of Circle
    Circle circle = new Circle();

    // Set the radius using the setter method
    circle.setRadius(7.0);

    // Get the radius using the getter method
    System.out.println("Circle Radius: " + circle.getRadius());
    System.out.println("Circle Area: " + circle.calculateArea());
    System.out.println("Circle Perimeter: " + circle.calculatePerimeter());
  }
}

class Circle {
  private double radius;

  public double getRadius() {
    return radius;
  }

  public void setRadius(double radius) {
    this.radius = radius;
  }

  public double calculateArea() {
    return Math.PI * radius * radius;
  }

  public double calculatePerimeter() {
    return 2 * Math.PI * radius;
  }
}


Output:
Circle Radius: 7.0
Circle Area: 153.93804002589985
Circle Perimeter: 43.982297150257104
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Inheritance:








































































