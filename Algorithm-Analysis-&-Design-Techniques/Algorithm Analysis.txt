Q1.
Find that unique element without using extra space,When given an array where every element appears twice except for one element.Write algorithm in java.

Answer:
public class Main {

    public static void main(String[] args) {
        int[] array = {8, 4, 2, 6, 10, 4, 8, 7, 10, 2, 4, 6, 8};

        int uniqueE = UniqueElement(array);

        System.out.println(uniqueE);
    }

    static int UniqueElement(int[] array) {
        int result = 0;

        for (int num : array) {
            result ^= num;
        }

        return result;
    }
}

Output: 7
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q2.
Implement a sorting algorithm that achieves linear time complexity under a specific condition . Analyze the time complexity.

Answer:
public class CountingSort {
    public static void main(String[] args) {
        int[] array = {4, 2, 2, 8, 3, 3, 1};

        System.out.println(Arrays.toString(array));

        countingSort(array);

        System.out.println(Arrays.toString(array));
    }

    static void countingSort(int[] arr) {
        int max = Arrays.stream(arr).max().orElse(0);
        int min = Arrays.stream(arr).min().orElse(0);

        int range = max - min + 1;
        int[] count = new int[range];
        int[] output = new int[arr.length];

        for (int value : arr) {
            count[value - min]++;
        }
        for (int i = 1; i < range; i++) {
            count[i] += count[i - 1];
        }
        for (int i = arr.length - 1; i >= 0; i--) {
            output[count[arr[i] - min] - 1] = arr[i];
            count[arr[i] - min]--;
        }

        System.arraycopy(output, 0, arr, 0, arr.length);
    }
}
output:
[4, 2, 2, 8, 3, 3, 1]
[1, 2, 2, 3, 3, 4, 8]

Time Complexity is O(n + k).
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q3.
What will be the time complexity for following question.
T(n) = 8T(n^(1/2))+(log n)^2 if n>2  =1,Otherwise

Options:
1. O((log n)^3)
2. O(nlogn)
3. O((log n)^4)
4. O(n)

Answer:
O((log n)^4) or O((log n)^3)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q4.
Consider the following  function.
int fun1 (int n) {
int i, j, k, p, q = 0;
for (i = 1; i < n; ++i) {
p = 0;
for (j = n; j > 1; j = j/2)
++ p;
for (k = 1; k<p; k = k*2)
++ q;
}
return q;
}
Which one of the following most closely approximates the return value of the function fun1?

1.n^3
2.n(log)
3.n logn^2
4.n logn (logn)

Answer:
n logn (logn)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q5.
Write a code in java for implementing an algorithm to multiply two matrices without using extra space.

Answer:

public class MatrixMultiplicationInPlace {
    public static void main(String[] args) {
        int[][] matrix1 = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
        int[][] matrix2 = {{9, 8, 7}, {6, 5, 4}, {3, 2, 1}};
        System.out.println("Matrix 1:");
        printMatrix(matrix1);

        printMatrix(matrix2);

        multiplyMatricesInPlace(matrix1, matrix2);

        printMatrix(matrix1);
    }

    static void multiplyMatricesInPlace(int[][] matrix1, int[][] matrix2) {
        int rows = matrix1.length;
        int column1 = matrix1[0].length;
        int column2 = matrix2[0].length;

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < column2; j++) {
                int sum = 0;
                for (int k = 0; k < column1; k++) {
                    sum += matrix1[i][k] * matrix2[k][j];
                }
                matrix1[i][j] = sum;
            }
        }
    }
    static void printMatrix(int[][] matrix) {
        for (int[] row : matrix) {
            for (int num : row) {
                System.out.print(num + " ");
            }
            System.out.println();
        }
    }
}


output:

1 2 3 
4 5 6 
7 8 9 

9 8 7 
6 5 4 
3 2 1 

30 24 18 
84 69 54 
138 114 90
