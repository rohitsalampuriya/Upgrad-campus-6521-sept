Q1.
Write the Java code for the Linear Search. It will take user input for the array and the search element.
Answer:

import java.util.*;
public class Main {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter number of elements:");
        int N = sc.nextInt();
        System.out.println("Enter elements:");

        int[] arr = new int[N];
        for (int i = 0; i < N; i++) {
            arr[i] = sc.nextInt();
        }

        System.out.println("Enter search element:");
        int search = sc.nextInt();

        int index = searchFind(N, arr, search);
        System.out.println(Arrays.toString(arr));

        if (index == -1) {
            System.out.println("Element not found");
        } else {
            System.out.println("The element is present at index " + index);
        }
    }

    public static int searchFind(int N, int[] arr, int search) {
        for (int i = 0; i < N; i++) {
            if (arr[i] == search) {
                return i;
            }
        }
        return -1;
    }
}

Output:
Enter number of elements:
5
Enter elements:
1
2
3
4
99
Enter search element:
99
[1, 2, 3, 4, 99]
The element is present at index 4
---------------------------------------------------------------------------------------------------------------------
Q2.
Given an integer array nums, return the number of reverse pairs in the array.
A reverse pair is a pair (i, j) where:
0 <= i < j < nums.length and
nums[i] > 2 * nums[j].

Answer:

public class Main{
    public static void main(String[] args) {
        int[] nums = {2,4,3,5,1};
        int count = reversePairs(nums);
        System.out.println("Number of reverse pairs: " + count);
    }
    public static int reversePairs(int[] nums) {
        return mergeSort(nums, 0, nums.length - 1);
    }
    private static int mergeSort(int[] nums, int left, int right) {
        if (left >= right) {
            return 0;
        }
        int mid = left + (right - left) / 2;
        int count = mergeSort(nums, left, mid) + mergeSort(nums, mid + 1, right);
        int j = mid + 1;
        for (int i = left; i <= mid; i++) {
            while (j <= right && nums[i] > 2L * nums[j]) {
                j++;
            }
            count += (j - (mid + 1));
        }
        merge(nums, left, mid, right);
        return count;
    }
    private static void merge(int[] nums, int left, int mid, int right) {
        int[] temp = new int[right - left + 1];
        int i = left, j = mid + 1, k = 0;

        while (i <= mid && j <= right) {
            if (nums[i] <= nums[j]) {
                temp[k++] = nums[i++];
            } else {
                temp[k++] = nums[j++];
            }
        }
        while (i <= mid) {
            temp[k++] = nums[i++];
        }
        while (j <= right) {
            temp[k++] = nums[j++];
        }
        for (i = 0; i < temp.length; i++) {
            nums[left + i] = temp[i];
        }
    }
}

Output:
Number of reverse pairs: 3
------------------------------------------------------------------------------------------------------------------------
Q3.
Write the code in Java shows an implementation of selection sort and then uses it to sort {7,5, 3, 4, 1, 2,6}:
Answer:
public class SelectionSort {
    public static void selectionSort(int[] array) {
        int n = array.length;
        for (int i = 0; i < n - 1; i++) {
            int minIndex = i;
            for (int j = i + 1; j < n; j++) {
                if (array[j] < array[minIndex]) {
                    minIndex = j;
                }
            }
            int temp = array[minIndex];
            array[minIndex] = array[i];
            array[i] = temp;
        }
    }

    public static void main(String[] args) {
        int[] array = {7, 5, 3, 4, 1, 2, 6};
        selectionSort(array);
        System.out.println("Sorted array: ");
        for (int i : array) {
            System.out.print(i + " ");
        }
    }
}

Output:
Sorted array: 1 2 3 4 5 6 7
------------------------------------------------------------------------------------------------------------------------------
Q4.
Java implementation of insertion sort for an array of characters.

Answer:

public class CharInsertionSort {

    public static void main(String[] args) {
        char[] charArray = {'d', 'b', 'a', 'c', 'e'};

        System.out.println(new String(charArray));
        insertionSort(charArray);
        System.out.println("Sorted Array: " + new String(charArray));
    }

    public static void insertionSort(char[] arr) {
        int n = arr.length;

        for (int i = 1; i < n; ++i) {
            char key = arr[i];
            int j = i - 1;

            while (j >= 0 && arr[j] > key) {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
        }
    }
}
Output:
dbace
Sorted Array: abcde
---------------------------------------------------------------------------------------------------------------------
Q5.
